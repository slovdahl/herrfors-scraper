---
name: Linting

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  ruff:
    name: Ruff
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: 🏗 Set up Python ${{ env.PYTHON_VERSION }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: 🏗 Install workflow dependencies
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: 🏗 Install Python dependencies
        run: poetry install --no-interaction
      - name: 🚀 Run Ruff
        run: poetry run ruff check .

  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: 🏗 Set up Python ${{ env.PYTHON_VERSION }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: 🏗 Install workflow dependencies
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: 🏗 Install Python dependencies
        run: poetry install --no-interaction
      - name: 🚀 Run yamllint
        run: poetry run yamllint .

  requirements-export:
    name: requirements-export
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: 🏗 Set up Python ${{ env.PYTHON_VERSION }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: 🏗 Install workflow dependencies
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: 🏗 Install Python dependencies
        run: poetry install --no-interaction
      - name: 🏗 Install Poetry Export
        run: poetry self add poetry-plugin-export
      - name: 🚀 Regenerate requirements.txt
        run: poetry export --format=requirements.txt --without-hashes > requirements.txt
      - name: Check if the git repository is dirty
        id: get_changes
        run: echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - name: Fail if repository is dirty
        if: steps.get_changes.outputs.changed != 0
        run: exit 1
